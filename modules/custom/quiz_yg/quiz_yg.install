<?php
/**
 * @file
 * Installation hooks for Quiz module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\quiz_yg\QuizStorageSchema;

/**
 * Implements hook_install().
 */
function quiz_yg_install() {
  // Assign a weight 1 higher than content_translation to ensure quiz_yg_module_implements_alter
  // runs after content_translation_module_implements_alter.
  module_set_weight('quiz_yg', 11);
}

/**
 * Add status field.
 */
function quiz_yg_update_8001() {
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Published'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('status', 'quiz_yg', 'quiz_yg', $storage_definition);
}

/**
 * Add parent ID, parent type and parent field name fields.
 */
function quiz_yg_update_8002() {
  $storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Parent ID'))
    ->setDescription(t('The ID of the parent entity of which this entity is referenced.'))
    ->setSetting('is_ascii', TRUE);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('parent_id', 'quiz_yg', 'quiz_yg', $storage_definition);

  $storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Parent type'))
    ->setDescription(t('The entity parent type to which this entity is referenced.'))
    ->setSetting('is_ascii', TRUE)
    ->setSetting('max_length', EntityTypeInterface::ID_MAX_LENGTH);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('parent_type', 'quiz_yg', 'quiz_yg', $storage_definition);

  $storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Parent field name'))
    ->setDescription(t('The entity parent field name to which this entity is referenced.'))
    ->setSetting('is_ascii', TRUE)
    ->setSetting('max_length', FieldStorageConfig::NAME_MAX_LENGTH);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('parent_field_name', 'quiz_yg', 'quiz_yg', $storage_definition);
}

/**
 * Placeholder for the previous 8003 update.
 */
function quiz_yg_update_8003() {
  // The original update function was moved to be post update.
  \Drupal::state()->set('quiz_yg_update_8003_placeholder', TRUE);
}

/**
 * Truncate the content_translation_status columns.
 */
function quiz_yg_update_8004() {

  $field_name = 'content_translation_status';

  $tables_to_update = [
    'quiz_yg_item_field_data',
    'quiz_yg_item_revision_field_data'
  ];

  $database = Drupal::database();
  $entity_definition_update_manager = Drupal::entityDefinitionUpdateManager();

  // Ensure that the data from the content translation status field is deleted
  // so that the field can safely be deleted.
  foreach ($tables_to_update as $table_to_update) {
    if ($database->schema()->fieldExists($table_to_update, $field_name)) {
      $database->update($table_to_update)
        ->fields([$field_name => NULL])
        ->execute();
    }
  }


  // Delete the storage definition if it was defined before.
  $storage_definition = $entity_definition_update_manager->getFieldStorageDefinition($field_name, 'quiz_yg');
  if ($storage_definition) {
    $entity_definition_update_manager->uninstallFieldStorageDefinition($storage_definition);
  }
}

/**
 * Remove revision_timestamp, changed fields, add content_translation_changed.
 */
function quiz_yg_update_8006() {

  $tables_fields = [
    'quiz_yg_item_revision' => 'revision_timestamp',
    'quiz_yg_item_field_data' => 'changed',
    'quiz_yg_item_revision_field_data' => 'changed',
  ];

  $database = Drupal::database();
  $entity_definition_update_manager = Drupal::entityDefinitionUpdateManager();

  // Ensure that the data from the content translation status field is deleted
  // so that the field can safely be deleted.
  foreach ($tables_fields as $table => $field) {
    if ($database->schema()->fieldExists($table, $field)) {
      $database->update($table)
        ->fields([$field => NULL])
        ->execute();
    }
  }

  foreach ($tables_fields as $table => $field) {
    // Delete the storage definition if it was defined before.
    $storage_definition = $entity_definition_update_manager->getFieldStorageDefinition($field, 'quiz_yg');
    if ($storage_definition) {
      $entity_definition_update_manager->uninstallFieldStorageDefinition($storage_definition);
    }
  }

  // Add content_translation_changed field.
  $field_storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('quiz_yg');
  if (isset($field_storage_definitions['content_translation_changed'])) {
    $storage_definition = BaseFieldDefinition::create('changed')
      ->setLabel(t('Translation changed time'))
      ->setDescription(t('The Unix timestamp when the translation was most recently saved.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE);
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition('content_translation_changed', 'quiz_yg', 'quiz_yg', $storage_definition);
  }
}

/**
 * Ensure that existing quiz_yg are published.
 */
function quiz_yg_update_8007() {
  \Drupal::database()
    ->update('quiz_yg_item_field_data')
    ->fields(['status' => 1])
    ->isNull('status')
    ->execute();
  \Drupal::database()
    ->update('quiz_yg_item_revision_field_data')
    ->fields(['status' => 1])
    ->isNull('status')
    ->execute();
}

/**
 * Ensure that the parent indexes are added to the quiz_yg entity.
 */
function quiz_yg_update_8008() {
  $manager = \Drupal::entityDefinitionUpdateManager();

  // Get the current quiz_yg entity type definition, ensure the storage schema
  // class is set.
  $entity_type = $manager->getEntityType('quiz_yg')
    ->setHandlerClass('storage_schema', QuizStorageSchema::class);

  // Regenerate entity type indexes.
  $manager->updateEntityType($entity_type);
}

/**
 * Set the weight to 11 to override content_translation's hook_module_implements_alter implementation
 */
function quiz_yg_update_8009() {
  module_set_weight('quiz_yg', 11);
}

/**
 * Add behavior plugins fields.
 */
function quiz_yg_update_8010() {
  $storage_definition = BaseFieldDefinition::create('string_long')
    ->setLabel(t('Behavior settings'))
    ->setDescription(t('The behavior plugin settings'));
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('behavior_settings', 'quiz_yg', 'quiz_yg', $storage_definition);
}

/**
 * Make the behavior plugins field of Quiz revisionable.
 */
function quiz_yg_update_8011() {
  \Drupal::database()->update('quiz_yg_item_field_data')
    ->fields(['behavior_settings' => NULL])
    ->execute();

  /** @var \Drupal\Core\Field\BaseFieldDefinition $storage_definition */
  $storage_definition = \Drupal::entityDefinitionUpdateManager()->getFieldStorageDefinition('behavior_settings', 'quiz_yg');
  $storage_definition->setRevisionable(TRUE);
  \Drupal::entityDefinitionUpdateManager()->updateFieldStorageDefinition($storage_definition);
}

/**
 * Install file module.
 */
function quiz_yg_update_8012() {
  \Drupal::service('module_installer')->install(['file']);
}

/**
 * Set the 'published' entity key and set show published setting to FALSE.
 */
function quiz_yg_update_8013() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $definition_update_manager->getEntityType('quiz_yg');
  $keys = $entity_type->getKeys();
  $keys['published'] = 'status';
  $entity_type->set('entity_keys', $keys);
  $definition_update_manager->updateEntityType($entity_type);

  // Explicitly disable the show_unpublished setting on existing sites and
  // notify users about it.
  $config = \Drupal::configFactory()->getEditable('quiz_yg.settings');
  $config->set('show_unpublished', FALSE);
  return t('Quiz can now display unpublished Quiz to users with the "View unpublished quiz_yg" permission. Enable it on Adminstration > Configuration > Content > Quiz and grant to permission to use it.');
}

/**
 * Update the status field.
 */
function quiz_yg_update_8014() {
  // The status field was promoted to an entity key in quiz_yg_update_8013(),
  // which makes it NOT NULL in the default SQL storage, which means its storage
  // definition needs to be updated as well.
  $entity_definition_update_manager = \Drupal::service('entity.definition_update_manager');
  $entity_definition_update_manager->updateFieldStorageDefinition($entity_definition_update_manager->getFieldStorageDefinition('status', 'quiz_yg'));
}

/**
 * Remove the base field overrides for moderation_state field.
 */
function quiz_yg_update_8015() {
  $config_factory = \Drupal::configFactory();
  $names = $config_factory->listAll('core.base_field_override.quiz_yg.');
  foreach ($names as $name) {
    $config = $config_factory->getEditable($name);
    if ($config->get('field_name') === 'moderation_state') {
      $config->delete();
    }
  }
}


function quiz_yg_schema() {
  $schema = [];
  $schema['quiz_attempts'] = [
    'description' => 'Table storing user Quiz attempts',
    'fields' => [
      'attempt_id' => [
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The primary identifier of this relationship.',
      ],
      'quiz_id' => [
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The Quiz node relationship.',
      ],
      'user_id' => [
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The Quiz node relationship.',
      ], 
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ], 
      'time_taken' => [
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'precision'=>2,
      ],
    ],
    'primary key' => ['attempt_id'],
  ];
  $schema['quiz_result'] = [
    'description' => 'Table storing Quiz Result.',
    'fields' => [
      'result_id' => [
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The primary identifier of this relationship.',
      ],
      'attempt_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The parent relationship of this relationship.',
      ],
      'quiz_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The quiz that this question belongs to.',
      ],
      'question_no' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The quiz version that this question belongs to.',
      ],
      'question_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The question node ID.',
      ],
      'user_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The question node version ID.',
      ],
      'answer' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Answer of the Question.',
      ],
      'correct_answer' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Correct Answer of the Question.',
      ],
      'correct' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Correct Answer of the Question.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'score' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The Quiz Score',
      ],
    ],
    'primary key' => ['result_id'],
  ];

  return $schema;
}